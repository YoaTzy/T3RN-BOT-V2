#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import base64
import zlib
import sys
import os
import time
import traceback

class YpDXclez:
    @staticmethod
    def JaMWPrNR():
        try:
            # Check if being traced/debugged
            if hasattr(sys, 'gettrace') and sys.gettrace():
                return False
            # Check modification time (anti-tampering)
            if os.path.getmtime(__file__) > time.time():
                return False
            return True
        except:
            return False

# Encrypted payload (modifying this will break the code)
mtwQDgVC = 'x+8ylMlG`#!+-_F`;><0h<#ydW(KD_{M0Sevi6*|=vjY1PA=6Ylcyb%_^Qgi=Q=PVNe!+p_17?@qq&l{kvltG8w2M6`k@EI@u~0j>^oXnML5_r!Hfv3>#V?*l}utUTMPIz`I$M&f%xt0mu+W8ML6d!jinW|`K{KM?PPQ&YaPlf_>L&Lm$3Nipe;0F14{P;=*Sqz_K@4NwlXD07&Nsu_1_`KiLJ}>=YKUiQeF4}_Q4{@`M1ivxPDJ7MhNu>{H8Cqo|l;8?m={Y8xOxO+>H~ii=5k#?K*jQUOdNkjLIjkm-*K0l4NEnV<E{7hoKvz^y%ZQu{SzpTR_qglbI&7h^p59om*yKK?vDr*_b?$fTZDv;(2IXO#|$H`nWolli-oExo1;UMl}9siP<Hkt>A%y?>=E{Z9V%x-K8GB>zU-8|0ZdCK{CNS*1c89wczcu?@KN~7A@5y*4-+G{i^h|xg%6qZz9Jh-n|r(nZNV9pHN<B8wkm4+>$=bq>q;9>}z>@W=g|4hRP(;zOvxsuV8Fd7#-jd{GvI_t&PZ_;cjm>1|a_l;)NHul7`8<q&IkDKt;tm`lUU9p@ol=`a?!jTRzS%%*Ix@rnrXVlYKN>Y&Wq4@!Su&yO;KclVUkePe8LWhOI=~gQ%RZm~MC_6B+ewh_zkPx3I&ly;)sm6A`d0fZPSj@SFF)m@hmg7Xi=?nX^!f@s5q3v13{y96{+g^xY({ujHHd^hGc+TOFr%)wc?@ivQ@j?088u9Z$ImnXEU(rIyR`zEo%@W(&0>*NH}kwx!hPqI@V<L^13G!^aA-_pbMbwOc7-YBuIJz|Snaw6~S-{84XOYZSg<fTLg2mhQu=>wGdoNK?8!?uab7tmlo6if>y_e@4tD&ec(=<L%_J?_e}uQx&TO$*v5kiIUc&lQ>8vbRDrX#n(Eq@rLF7t7>dVK{V?P`kpGevAgP$<|S@FO%~H*jkHIRz3$ra>SRN6LJ#(1+LR8^u$R%3y-X-&3O(y5oTLYhgTI@!`f?_DO){$h_O=+G_Mwmbk}+i^4GYO8;@$+$<BFMp?>K!YR3ZE}^14ONspFL4icdUkegM%a$=xcp`;U$5iFjve9SX!5)R#rQ=!(ji>N#aPQXueWiN^t?{h7t;?<O!Z7Z&aW%HANH@wVyWx?p@RRz~F))Yl-af`*p%={sa>Y9GY{?xrDwtEBd#jZth=c0=!Qgv$k_tLW4Iqh)L+c}eRQ%g{!G^Rd8&>M?pNayZUEhodOXuJ)dqm~1Q~WhkH#{hSx0u%_Ra>vwTdKr`Yg#jFdWqUrtW_(f(~6CuDM#hOU5tn`__y=i4s5go#8k=kFZxs#mim1lfKQb*r%!kaXUxuwzmi+)30aT@*$-q0n%hl1d~rDG{9c_P4l+L;^1_29?ugIaEX7e1~k(3Kd@`>oWmuqY-n1}ozO#m57(k-LtE^fh~D77(s1-j-36lKu3jy>D<y6;9Cu*Pbzi>5uujwsl${bT;5Vz=SE!p`XgX>@{I~1v~6C;)E2tq>YA>i7#R@5>L@9^OOyO<oUq!fjK%?bpoS(o!l#tgW|}spiyN-aUj$tgqKIeqK}w|h+=$d5JbQ>;@?A~jknbPu61KVbPVnyoSX`Z{F26{sU=576iwe}jI;%ox`LLh>O?(qc~8k@gNg^uzO{kmtw~-&b|&-`huKP$h`9f>hhJndeiEwzhl&+|^p?r$>Tf?pY$nez)QmW=pPm1evuJK-e;vpX^Q>F3gz=iL=QA!QRRPp(#M2+Ug5}Qfzj-Tcc^I@6i<T;)=)2vS^Drn!V@%={){PCh?Y!=)=Q}oV5+>|8lDjv;^_85EqJ1VN12?xN;JpEgx3bZdxqmfPLp#)U(xo1*f#C0viCS(`T1Lcw(b6Tsnd;f9mry)2Kq=n<{?I+1j=Sc8?ofPkLn7{T;-)*3wXK1J^D1y7cM8N4)71vCtDKLc|3zw3btb`ZgUcw$_4m^BkT63sY#ho3`;Q;o`~9A=oH%(+Vk*ih#GoIWj=R^S=R9^cM+?pc*Tyi&v9pcm@Jl6QOcdsE^^{AggrM-|i+5Wq9xUH&$gdx&xUJRxiep1XbvoB4&)pKywyyW|zkD<-KmpPu;F}APilpF#q)ACzN=4*(lGP{K`QZ5MvnnZWWHa+RmCH|nrR(?Qv3ev&Vobkq$-D=Zx{HpRze9W=R9mh$$c!7Sp6!JCqF!}690~je&!iULu86_u=|Ea+5*WZN+uj<*_>aYoqG?Y<9UAr}=c6E)wD*Cc@gy-ZM<>1`-rWenvf$Ezt1m`vRaM6}(xnN>m8sdbt1>-KZ~*pj?XC)gk@54tzd<{40Y9)S#E4(JpoHY)ykK`S96Hwwo{3eQv5KCCyEQInY(cYY=B^I2^_iZN<yu^ORXON3&x|L;o`uV-pC~YCS_7<Q>6ItB{f6a_foNhxW?a91$fF<LwdCQSuq1d}206n&=93(~rMdLJnr~TWY+TAI)7@X0y}6O)j&@uoSs$=}&fPJ;_=fPRfH7Qm5HY?f`kOq-@S@E9s$)B90|E1P*Utf|@tN!7{YyAqOfJz0+`1H-<>k(Ul0hzSA2ZYjili~AxU+-wmS1LH5J>QT&Z#V&nziJBpICM=3lsb+>DM8w{i*MXiCS?pQ8ldtiG&HU|N57OkYgk)P$>3w?ZzsJ=Cy={;W<56RbBE4$-O1T{p;lNuxM38S}(wC_^BG)?X$$cj4*w9Ssk|^)zey_q^F<b@h3}Jb`GFp%c~l`jhWS&mtZVoVm9GE*Q+Isw4V2ouuwB52|Tk7*|1Zhkf)NQ@L^I-1y9ox;K@_btF@l8;5aZ*M-<=(&y_~J<%Q|JfIBC70~^Bx)Q2do<B!+qw?bqfN=@}~kCjHdr1akWx^+HdVM@zq;)h?Fs*2o#lQ&voTMWHC_>U#q^!@#qp<QSx9vZYP+^SWQjkklI?kGA!A3wW&{;ngO{<empp-XHc3n;fNouvk<;qKm`tS~}P22afk|I<jTr>2dp`ba=tX<We~fS?SVx`m&Knmi^#13~@_&DvYJqw19Z|1W899yQVhgVr~Zn4rwD@kL=;M?UyF&fYD&{j%D>=ssOzPY>&G*pyMWtB8>Ns%Sh<9}N8;>B>rk>6YZ2x_&=SL>I<&k;p%rw2JuV{Y8CKT@AP>z=m4ipS8_`;eAJEcpso9#mHZyfsXV4wp}x9ZY;$x%+MgQ_Wy*YykIp^9Utp0($O8R=)C^6hDS_JU=`^L*1=zf=Dv#Hkwac`XHLvEozPQ(_m`7_`gKP|ZCk*7oxwS!@S5tmh$>uR5ec$qp0x#nrl5wcv2!V3Xg&B0;EhJJ?Tv=MfjnYqN+8RAimFYupr_~kwJkCy5H-MWlhiu7?Wx+AmTpBx0T%9e`ieM*_?4OTj$<w)O-k-}%7_@Uh=|JkoL6B!emkNo+nia_sFBK<hh|JDen{#Hlc+6*tCX3Du0BjNM+T=Y+>uI(qpZpEnooabXEV4rfTT;Ak>l*4lu34BL^<?!na~Z4|MBvLq<DR14Irl?)~{N+sr~+qq)03;R1?@1)T<nu|Gwv!^mjf$9xBLj$h$7h@~4^LxHflSP8i%g$k1B2^Q-RYr)+6bU^DDJoXQ@V?V9(9fj>t^7*Fdv^u!OK|Ks?t>1tk5X#w&e@vkS2l!%V%sc2GmMH9^{-IE=liRGG!=s9|PR7k8l_lF6Wl<C=-hg@P-U=F7WfxRrlxSG_ffK7cbcsj%&)Q~B~j=b%(=V5A9S{2a<&B0%e@#@<1oi$!bK`+b=@VqdLv9|2!<zz%M3LO13z||m-wxsF1x@CMO9t`jR`PCqqte(%js6ItiY7zW$&#gDaucXcA=vXCJX<O<el8GI$o`~r4ok1*TNebC(=(k<R=JB4F;z3(F1542q*N8`(xr~ya<UJ%<bzJf&?~ERl^7+P{j66vzSplqi?U^u`iju{U>wZRBXcfBv`kzR><Ft|G{W4-sSP<SdfP(?9u(ipa{3<hMP8+2h>ySmgudK}RfqZLaN*1#WfRiMh>*$`Hl3{8wQBu<a;K~5B{DSWDzffU9VNCdO_}@Fn{I1XGmNtDfXdJyajoUwxj^oDbzC$}m7(vB*)4?}_hNjB3pI&$|91_C|&Y2;osf*CNt7<`R90TPU=7mbpwx`17i91ywW>BqtoTFB^i1+jMq)bhHV^XXr=BQD>p`FgB>`!JRPb{Z!!lOBmm5Jk{ls#r?VJr7w?1@ChpQ+TGq;o($SUCGH?$J$(iiqd_xJM^gO-1Ex&43ioy5q<1lS?rvU{mZN&$}bVhTxk2mtTKKLtf8d%ds$>^ryyw|28l|9W4ASii;eixQ*tt{Zws7b1=sqh^#rBllk%JiFIIFZ5_@Ri`ET<xQ6uPqeDVZWI?(G;MPTom8JNWfJr}oVGrJO*Q{BYwV2`k>q}&60}$^&@UdBpkM!n(v1v?19!K>F>4Pk&lDp-sj50hgY%u2n-N6fv_^jvi;!kjET1V7*{Hrmuw&>fv=QAj7W<KL5{+2t!w!WC1|7T@IN&?FV#f%D`lD*EnyKGK;RX*Sk?A|zzsNk9Lu3t+|ZXEhEh1y1jg^-ei;yh1H6&=|Cg|R)jw58eQ>OV+Y5Ff*O`KLvSkox4bpG{|AVmie(oT@vnfr`zRgD_7%S{LdB)yG?!sF9nJpmlh1QYY{N#Fz}1hwAa@jYL>+b~?W?jH+3&<gd`?k~3O)R0+gC%bZ%%>b;)s;eI%A7**{I+@3G1uAs@dzFtURP%@%%)1^wf_x+HGrD|$A5)a5f_K-it{H6c;nr%I13Iy#b#HIww|BCGEl59g-bsf|y!mc}p|FO=b@-J;dc?+Nl$dVJ@q_)(c@O5}d5nJvr+q(dU<(cQHiDgVdWg_|oimfop{;JHj{X;^3b4TDS&7xb=l(psTpF~o6dNHLo-Pt#}v9Immqi}FDLj?47>4pTPw5<PvyERg5W>x4u`?CwGt?I$L>OC}ULNM}whq4s2|M<)N<w#pw7)kyr-^nJ)<fY`RkX~~qM;p<8*^yeXtLpjxsX=H%QUl0-{JJ}v<KUC9foozRYb>xO*4a<jiL=CngC$*hQxmTkgN$3;{pp79r+Fu9Tr8^(=+Hl!r|6%TxoLiORx`I?&anxQy7q#Cq*qQrVL!qH+=?;KrL)wNu1!HAXh7Iy;i4bDu!4iUky>O>R~oSw#<&HPg1zVFqfR77M;PH^^ORA(yQ`75_+VRiQ&Ywj`nX%Rs*v*h=qq6&WIWeD!K_uHm7&Uyt1mfLQU<?&@R<RUqk`X`oj!ejS|0u(i=qskk?jBBgFt*?Sxx3F-h=_0<>$kKooHn|Ni)fBmB|;Y_@&AJrA%ZgY8mt_^o%~D{DhN(jz2v!A2zuz!pS7p`-$u0>smTGOHt%3)Ui2}|Ea*Q^Jz>nOk1rKg@q~E^t#XPpm}ys0}u6V?XWA3;j`7@yF^Yi8x^bpinb)vfSkjpiZ4xFWj>-O@`MwaubSb4>t#eSa45L|^^{wV;g`*Wk6mVZ1_b66fVxPeg1O_Q^CV(-P)E2whlLE!wYkLhgLE!XVMx6s?1@^U<FJ{ojU{z$XAz=3-LzfXwe9Ebq<VfbQ(N*f_m3--u=et@tt)jwNjlIr)!rq>x~BB<zJESa3pK?(o}f^%v#R}(tx7(5MN-}cow7#GxwYNAmoha+Z3M7$*3TNpjJM;So;OoILk7Mi(XJAQg5ueu>_}x!3INhKj;I=_q_f_>qDenVVqX3OiH2Uqx98)Cpl^LxLMr1r;KmHc@xR=!vU@#LQx&BNhTAd7r03F)mpCa`aUJ#n_|Qbd|MltMuX<W}N(A#OkESAt^Nx!Dn?OBJa18Qn_K7#bfsTQcigz<3T1)(Y>d!~Gr0Vjd>^&tWNE^&^>d69)<duWu`e9f$7eUhw+^H+qxuN!;tv_&U2?XLc%dj`z=$YWTo+vO?6&Ii=&Dj^PwULkOxjbDdVkxg~_Nf!ZwY%b&>3e)cN=@l)!;Ve7rL3Rt<yI>;c3kLs(S=3LkfomDoLXNlR~)-3>xo{Mw7J#exFbO-Q~|IP$+Sg`{pXT{`ek8MVKDY9?1^8U>f`b5oF`H-Whk&<?2k{Iqm17EqHrg5Pc{4?*2)Ocn)#BHoL@C#N=Lvdg`gL*qnm^Jsy26L1y!;yo61(i{+;f-oO^g+88q$y`h!n~pzreIlXGz=Lm9OMg_jM#m-*Y~o^VAgWFoS0%E&{Ixs}tgj4)GCb~oZY%&Z=m`MKe}ky&>}9YNSW--KI-@U-pp@+Lb&M<?+r)!81&<nh4tmpv<9OERTm*T@~;w3*ARs&Gqu0~7u+%EnvYfwRb)sYGyL5jyj3%gHv<y0hE3mv(x7QcM3Nii9bGsPB{D{6=qPX)Nau*qRWSmWGYKwR?GGcOc&_%ab46wVcuY{U>^2YdYV3*`iaFq4?vmp+-(~YeBIr@Si!K`>~Uvi%m;Tazmpb;(`{wimjB8l6Xi+Z3^i$(u+gTrjyK{l|gqP5Cz^B+>9xT{jigw_)sf%5EbMg+m{BstE-ZLuUIfi0~^l-#G@bFhr5iXief%w91E-mhoLl-<eAfx=RJITMIGpUnYB>CrHu8szEn>%90ty1`Jgz&r=*XTs(g2QPD|xC?1?m#jqCa4m{%wy7X{&W(!E!zu$kMRfNUlsPA{$r`MnCNt*iIGrBq^S90b8K=b<F6rjOQxo-!wHb2s32{*N5Nt@X*Jfj?}1TO$50+T9?e@q^B=^Lj~SO)Ilv^WIv|g6V;^kaKw@Zz$0$jjTns`K!f;{4iA^Qz7#K^~gTW<n7Y@<u^o9VmZ+$*`PGXqNvZW{aqzUL^k?;hmIxAvW@MgvrRiFb1uLTj?@prtmo>6hG<<qKo`&_`JrFEqqFd!q9i_2a!=)b)5kZX_WACSlU6A!SVze^;NBy?@~+SC=_Yza95c3V__znZ=Ahp4k5Fh}emC4N=Eo<@^Nro~uq0(6R|&5vkGfgcfTZr5r8;Xi1u)?w;nG~otE}OYpMNq~NgnbXhtnRDf~Lpf@m5tOQ6blRi?A!IkhAi>^h05FdMdkcla*hZ^Q`oVsV`MkOBLsS_?tAfm#gBCu55HYdMmOr+{OprkCVxqp+Zh5c1XK&|A{D=pNQb2r)6JO4KKj}fV?T!spIIhkA6#PUIo4?;kzlts-DZIuTEQRRVnWt;E_v}=$G8Kol1XUSs1l7>Xby0rtgBT@^elqPg2h=%e7Cq>F?{Q{5@@dZ5PUa=$Hkyto7XQzG^;Ke*w;T_{0*Cwvdp%@IzrgZxQk_=+{l9myVO`vnPLP4KBDU*@p?7tLpfGs%kMM6<MPSil1DbuHo{b?tMFW5K-W7*RwmNm9E5q|6@io6ke+Wk+BQDketA~?KxCXV@$ye=YmIpzWM)^hB81&2wm!M^O_jRw&nD<hbL-3Ls7sd=!HDY=%)YS=_EKkML7CmoP$Kus_2UD@<2TySp&u|{;V*?^{tkJn>&4DVmRyzfrlx<jkAh`qD)F-b1tP4)7$`pr<97Hpgt>I5Gmyq*t$EKrJ0hIx=UU!c|Of;-jFxTjf&lewS8+wa4f+lin0%~^Np61yl!wMYeWAJ^s+>&zLA%Q{dYfI0~FFH!GQ&fiS+N_|5P|b6e+bX=c-uCwVwX*zCBJwV-)K!{)JhJllqm0jc0f-Kt$9T*N0Y{f%w|1lvZO}7dOu&(%Lk&m-Xq8k1ITR6E(jo)2uGUi@1cFsY@pz8z;$k!J=2JiH`P`h(J?ab3pJlj-f8Nu9W|-;AUiFLI~$^@u>i)_vF>L;YvPoUM{Bx$fQ%Xl!KV&fHHJ=ehIH`)4URgt%dBQ;(RGUZw~Dx*`N@gn55^Ex?o;(0ZHF_`I#7{k-UTHp=L&U4Lar+=blZT_v+cdiZMM<e+$n$(1|^)<nD~@i+f9NbVI-{`;|A%hmVf>hB9ehZYt9x{fJZEn1#*esytdiMj59s>7rPKu({)cm|jLe8zTHM{Jl$&p!UkJx^hH+a3R4r$;()*t-jorjdV?Obxy=T+l>RZ=&i|;vRQR>elfoV`_U?^wdkC&tu;O(S1I*2%(yt2nWB%7w^V*lA48=eg_a`DxV*!Vfj%^I8w<)S#L-!)@UiTx>m_$ZK`_iF_>UvFnx_4lvv*-eLtV3CoQOE1^{|oik!)onb`rTZ&zK^qgM`YW?nP-r6i@#;inT<!gofb#@MKLt6HV)Q(%mT6`HhUDmT)UcXaK-$@r_=|h3%NQ^duxgazy7dozzd3f~%FA>QpNzRRh;8-^WC>>*e8zo_t7ebTiUA+=mZ=h`sXWx-U3EKsDGg(WwlQw6@Fcyg+Mb9$fPg`qwzc|GA9wkbihwP8`dBgVj-s>9OFKxnXuQ3jo1)(W^zUgqM!H|0`%^RVK0&kIFrc<A&v!v3+1pd0gZIjg=OkgqX^W=UX!}O*P{zosbKVjIExKzC>O&9uUkm^`|Jrw20{E>0?wOSX{Cu;h991l9igNhkQGAVl%~Y{Dw58g_)SD=0i$XWG=}T+>Jh{hpvqOqi{uWMJBRi_p%>?<DTrWr9Ny|2|cqm>!4fHmFU*#|7j_DLoMYGowf$6rIXR8@p^9}1U#$*(t!t~^|HsH`Y3&FU_<2%!?zcN<dTf#m3KuZR2ANC%ZM+^p@YDafJ`|o6FliE?xh5s^|$H%>3djMV=2`ul7j`EhMwE+wJ&~dXg&TY@52+B`K;QhwkuOo84<5|-Ksse{;t*KrD8&1Pe|-Bi?9HIub%Jrlxtaf5FpEC=&eP)sk-aF@<K#b3P9>IjG88-w~Uvqmu_cAWe(IO&!<<Uk%f}vu0BmPSX0jyjI>Ll^y-tNj!9QjXhi-O@~b+A^7@4K<U4SCRWbZ_k=+N%fu_u~=6^mTS1I9h#MU^OtoiqikVZvsRS4M;--Hm(neT%By*^+)LISNJ|He1RtGJxKkwJP-N-qB)j@=-m@TrEju4hVmQ9Pq%{+=Mhu;jzBkw1PwY#Y=b;M7^W;qlFh;YM?6RxP*-`N>4F_2a_1o;)*OTt~<|;@3L6n4pmJ`fyGuR7KA>*PvO$l(3$WhJ8MN7f|~I^OP%_<?6zTsYyOj2wBD|(tt$A_nMP}fGcTYV?WA%@RK0P_KVM_pj163SYE6?kI)C6?Z3qKxlmL`Z4j*u&yqvgpP1mchj&3mS^@7corqk9fTs72yik2>Ko$N3oupaJxw`k~kWphkQv<Pe%C%LOx0uJDgElZ@P8_Zah0r{lioJ&ak!LPRKpo!|&!h#m{r`@ttua(61`GH;z{?G?ft2Ez{A64sMH$d`#+nD4lK+;Gu3bAaYdyLQozn~3frOFlwJI!EcmuCGh@LE+y`S2bynaZ2LJ+<_kg+t<^y|y<ibQQ>Kv2jjgSH~Yr<2y4vra`)X*JOw?cZD9i<9R1jd^n{ejLL)nVv6-v8esLvob$HLpb$$*`gV*m7@NU@M2vk9Vxj2*SG_;xSO2eojOZ#X(!nw^_K(Jx%%{@?Q45~XcDgt+_DY7=!)d0fI(ATO9Zh4#<2*4{e$F_heuCFOi{!m`l2A2{`cDKku_sub05|ooR2-Rn7xwgr(P~(0X3z5>8l~e`HbNF=w?|Ze+K&s?ygqH{;`&|o??1N5JU7}iPT4&yN1{1iCbGQVn3jNm7H3_nyHVNqherqU|sei$+$(Glj_mps$4uVLk#N^;Eo5yiof-~?o2^aaXs`D?Vc;w@xSlyk9l@fL@B-y@4Ggchnb$XxHf)lVGqj>kJ$*LvySMy^lwu(S10%s(UVx3mAcO8=WkqGZBFq6*N+vh=&+gp{V-QT2p7yK&zd^Xx`X1Mj9W8#6g18ip50udmz&qBk7`3BRUOiB$%06o_UFc@>rFFcb3p8D(~3TU?U?fXtTS6qW*4^t-_I7GuBP#qoOURGUOd-%jH_AM?ViT-xLSC5Ofa$#oUanbkF%J7?oBdJ3KzC4@0th1<Gb~kl4weBb6))(%(DoikmZVp|0{cL9}Cqelb%<pljM!E@ogX{PcpG2|Ghfj{`H2i?o=Qob`hW~o2C@R>5YM|<!@9*K>)K7-IzMB`{)0Nn@x0aXc*Wk{JkR1yo&Xhv2-azL=572@SjD>_@3#8i+n&c5KR6O?c4^R<GaP7;B-Dm87ky*-Jb#1w3p%Mp)FWkS~>eaj*}d;s_o98hJ9gSOC7ok*40hM_@V2y`gM9wYZl%r>x)`|v8b1~o<liP9Syw!k-IyWu9Wze|3Z6gXBoc=`>98ZgqoK2h*UCK2`9M&&BiN>=Bb2`jzKds98UiMg{?NAwuIfMv3q(aU_;^+%B)e$hL^{nvU*EM1y1D|#D^KAt%#EHs$**+P)y}>%(ES=|Bm71{d6*91v>6|(x6|^j-BN5;X!0(aZ>et>w*ETjg#u+i%Tm!0Sv?m%&i;G_5H%5zb$wxA4uXh%)us-vaZmw<xE0CaYgQO%$!-%;j8SX>`82A3Qx2p!`vRambd5Om?vs#PCUjJg~lw~kg<mIfMY#mX*v27iq|oZmFkv=zG!|UQc%ZkfP^@zqO8f_vO7;}R|}#6!;M(GfrRtFyI@yuA2Fo^{-!LW{I=erxotj1LO!-{nZY^VqOHiKxppUA5edW@z@sd+;klKDlW!<JKv47n;?^IAq3*+~s$_LVNn64z)wCtiwEFL>mMTd$Z%xm5)Ynq4ui?aiqCZ|<P6^ZwfrcTJfxGgih<su)MjWCR{Fhg{=)Lvv_-Qau6Cw2%{H74k_3Qnhk0VlALMZPHk%b+*jOf;{qbM{|6gbf(_KgjI>$}kOuvu|>Oc<*s%8*OCjFaMpuvRQx8A$IR>)Q~C@Rrty=_Y0?Q%klI$f_`v<NyDM^HelkZVt{o=Bziorm2&>?nG^QRa?mqhJ!weu$#l{hebeM0Rzc&^NKf)o~@Oq;#W*2XE?7FfvXwEmb~<-fFxB&P7|^=*SsUe@rLq_>qkIiK^5-{;nWA7sDpusmwqLD9#g%3%7{awmFa=%>RnVsbWF1^{D~E%fQ8<M;%YTjaSORPfXN4e<eP((=P`6i5eV{Z?wC)|y0ppV>wa8qab2@6oVFdQgN4_VpmS$jZa4fs&A~L4ir|cd=Q=Z0bWHDJ$+Zf;?YsG)r#UWrc^SkdgoQtouj}@m^e}E@c}BhtleQ_s^S|A(x@Tp4T@t%1oQEostF--tjAV3YcoeM`{iz&;i?5iQ=ubUfa6H*?$czo#j^p*Sl2=qsc~Gw)(vL^R<Mq{ut4CT}N*&Y*?#McUvYy6<vP?Ey5=8AP@_{3^?XAnZyjgojb1L6r#IZEqh=`23n>ln{QdRyV=88{^iL~35v_V8tMLWrThO$S<@s{v};9_J(N-xAO!KMd{yPwXf@=Y*gLPP&Nj?huu^5T%2u0vFB1TV%G``#nOq^$3Oo<AgQ7%;VL;jTBkvY79e<vC<wb2hjl&ZiUKnw$N-j6EPKWJ$9W?4S;%<*d`2;7?^PcptG2|DIUUsf_RD=2k3M0Xf(_>D?gD|DT(Xi+O8wR!RRVoP;})wz<mvzE^i9Ybm~U;*u-EqK4l3pkgR?0SoIV^3Ykrr>nxG?kgufLQKmy_l{Vbteud(;8A}r840Iul94`@>AwDxn0;6#a$ds|=8H?IlIx1{oOEG28%wNyp0x+Jm+r>;l07hKXgI6`?6Mfd<B;2{t$svoL_oPH)t^tumWhm<vqvUFWI62^@{Kyzy_bWW|5Rc`bxFB)#i1X)`>w*W@jg6SbuR94?|~nc_n+1A>u6(991Eol&4w<4q^FLRza>6p1Wfd7j>9&Mn(u*;^Fw=0Vj}!F+R+W2gO88ClO|VrW>NNk@uU~Xke}w~>0WFqO;W`l(}EbryQP(zwj*vuK?9;JfUHuvfViB6n`>A<TSTiPgxxu^it*C!;v`>rPBZWb_t#5^v+v-UsY^z4Nf!Nb!`W5Fmgnu{>?l$w21xN^oP=1$^1a88p*=KLP&U98)TIf%=DD2yi9<UpSx(|2p3*qe_M*z*woGSLb1U)!fPx9!jlI{Tzj|X>2`ROI>Wx|3wCuv{pk-M^crNj6(zRcd^y-z9sU>cI5(&0v=8{px@T>j&oMk3Zb1>6j#m88mg74^vqkTgpOg8&%-rQJ^f|cE*=O|iMKupGe@_-NAlbn#Ux<h9!We&Lx&XG%tw)C8dgF7*N9yihn@0<glh40hzwn9XCRWZVCnYTEfho^?0{W?NAbzSLq{)8ja;hvR(yg5x=5F5)Rgq9$`gsH~4;b>+)T?^c6>&PwM<C?{??_DrM0WjbU;ky9ds<4oRkXC14Od9qM?v6OSrTLq*k2N?{7Ad*|k(VIHj+@|);xKrBcMjNil9ncfvY(r*jxRejax~d8jj<x0`R>u{pki-y94Wds`l&zDtCRTPyG%!W1PZJy*M?7%@b8$d^H45kb}yxJfrb~Ys;=JptVnx9U@+1&`Q9Uxw3wLv=wv}{S2d?T?}kmo^sVHlo+Ef}TNT4H$%<CJvii`I<XUhhYEAQRz_S>hl(p}W>u_RF7aq<miH!!fm!{9@@N6Y{Y&6ee&xl5=kiL_Z|9nU~QYOYEo0=Dkr-sY+qgYx;11-lN-?1mdqO0%x@jfm=c|Fu5=A}K&iT3J*=y+vnMLW}Xo{b8xmxPUttXg7oM?1G8imW`vlbP?}k1%5;5Gd0G*pMNf`H|L}@_0U2ODCfV+uJsTo{Z0<kv=|nT|eptk;q8Fw5-hj=X^dqaX#o}-mMv>i{$vd<XTT_aT5A#jlCnWrmD)A@NZ6RN=xMw)sZlpf%cxEzFsag5+UnvfP_QB@s8fIqeU=cLIki4@XIB!kM`)B^Lcw|P7&%E?u=Nw<hu9h=~+2a3lp_I?#ed3=8Wm8@jgUaNJro+!NWe!l;g&&qGe)kP!Pp>?5;eEv!ce~mqB48VN&N2@rg8>xu%e}foN?`MOn}T_tYP{l=jQF|8`n4M;FNmfuR$dgS3^ckUcd*6;0&?lbayBwwlA@omNCXN?XSW{+R^3@%`kF>^5wEYef8X+<;Z3hqU6YvpYFaP+Rpc($Pedp7F_!u`NPaOApLD&$J!6iiwfp?`1J4Wh&<s`=uSTsItY0<ya+U7)P&d_p2<E<mZp%l6rT1bUEcQ{L2NO<dKc@s3bE&9}(Vh?2{&?zVyK8fjmkodO*&0#*apvo}P-BiZ@d{9TV+%g|sG?yPA-J;Y5B@R#CwV{D4=MxU=w|t3)w-5Cz^b#G^#Jz514-u|rKFaY*_O(WO<Qgz@C>l_o-DaSzmR>cJa=kMx7)<uzC&5D@bYk(pc4qrd6=hFvCQat6T_&bmgMq3r3Ox?6ck0~o>p{lp8)?f0L%oMb*y7e=yu{MiDw{ovN=@M}3bMGeX$$<aQ!t+C#Q|6f{mb}7(!$geJh|CfWb?n^T^MIOW{-oX@=^QFP%;CEO;4JWWSozpnSx0B$N>S}Co12emA$(bd}fuWU{vSxiTPA1AH^nzB#s`ibWqjz~IXh5?L+^bKH`Le^D<YRFoX*=d^(WF+SxQ+Olm3Mj}Sw7V(orw*_<BW~x=to37Zd1P))y7cDyoiRSr8`np1WL?r(Txd__=(4)i#0(yQz+y<?~_Nwgs0Tvt2$_4N>QV4h@=3Hn6j0<iEDU&O$OmFijV}Afw=GSl1w!v2{p|U+QB8mjf9fpuU~O2XA9^P!`?>D=!C+ax+Pg(R0Y-$`JP9d^0(cak7F@OOa!ec->6EsvZU0i=w^0#byD(p@Y^P%nTy1@?`LH(7aYJV&5>5I>4nXOm|$IIX<6bd-mf&Mkb;b-_*_(b9WdMz^3xQ>@SlPIk8OB*LreNM!L(enfUJ_go@Zk{6+8Vqh|e30kdF'
xTZtRkhv = '*$xdCAb5sGxZ-a5z}%<T'

if not YpDXclez.JaMWPrNR():
    print("Security violation detected. Execution terminated.")
    sys.exit(1)

try:
    # Decoder function
    def toYgeEZG(AmKKLHpk):
        # Multi-layer decoding
        WlAAuocg = base64.b85decode(AmKKLHpk.encode('utf-8'))
        CQOhgHky = base64.b85decode(xTZtRkhv.encode('utf-8'))
        bTAUuDAv = bytes([WlAAuocg[i] ^ CQOhgHky[i % len(CQOhgHky)] for i in range(len(WlAAuocg))])
        BEAQOqot = zlib.decompress(base64.b85decode(bTAUuDAv))
        return BEAQOqot.decode('utf-8')
    
    # Execute the decoded code
    exec(toYgeEZG(mtwQDgVC))
except Exception as e:
    print(f"Code integrity verification failed: {type(e).__name__}")
    sys.exit(1)
